// Generated by gencpp from file testing/Setup.msg
// DO NOT EDIT!


#ifndef TESTING_MESSAGE_SETUP_H
#define TESTING_MESSAGE_SETUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testing
{
template <class ContainerAllocator>
struct Setup_
{
  typedef Setup_<ContainerAllocator> Type;

  Setup_()
    : reps(0)
    , diff(0)
    , type(0)  {
    }
  Setup_(const ContainerAllocator& _alloc)
    : reps(0)
    , diff(0)
    , type(0)  {
  (void)_alloc;
    }



   typedef int8_t _reps_type;
  _reps_type reps;

   typedef int8_t _diff_type;
  _diff_type diff;

   typedef int8_t _type_type;
  _type_type type;




  typedef boost::shared_ptr< ::testing::Setup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testing::Setup_<ContainerAllocator> const> ConstPtr;

}; // struct Setup_

typedef ::testing::Setup_<std::allocator<void> > Setup;

typedef boost::shared_ptr< ::testing::Setup > SetupPtr;
typedef boost::shared_ptr< ::testing::Setup const> SetupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testing::Setup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testing::Setup_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace testing

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'testing': ['/home/oliver/my_ws/src/testing/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::testing::Setup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testing::Setup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testing::Setup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testing::Setup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing::Setup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing::Setup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testing::Setup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "022e708b9c63e863122401514876ddf4";
  }

  static const char* value(const ::testing::Setup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x022e708b9c63e863ULL;
  static const uint64_t static_value2 = 0x122401514876ddf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::testing::Setup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testing/Setup";
  }

  static const char* value(const ::testing::Setup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testing::Setup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 reps\n\
int8 diff\n\
int8 type\n\
";
  }

  static const char* value(const ::testing::Setup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testing::Setup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reps);
      stream.next(m.diff);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Setup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testing::Setup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testing::Setup_<ContainerAllocator>& v)
  {
    s << indent << "reps: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reps);
    s << indent << "diff: ";
    Printer<int8_t>::stream(s, indent + "  ", v.diff);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTING_MESSAGE_SETUP_H
